requirements

sudo npm install express@latest socket.io@latest jsonwebtoken@latest dotenv@latest ioredis@latest helmet@latest mysql2@latest sequelize@latest multer@latest joi@latest express-rate-limit@latest winston@latest cors@latest hpp@latest winston-daily-rotate-file@latest morgan@latest compare-versions@latest hpp@latest prom-client@latest


도커 우분투(운영용) -> 개발시 필요없음
# 1. 의존 패키지 설치
sudo apt update
sudo apt install -y ca-certificates curl gnupg lsb-release

# 2. Docker 공식 GPG 키 등록
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \
  sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

# 3. Docker APT 저장소 추가 
echo \
  "deb [arch=$(dpkg --print-architecture) \
  signed-by=/etc/apt/keyrings/docker.gpg] \
  https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

# 4. Docker Engine·CLI·Compose 플러그인 설치
sudo apt update
sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

# 5. Docker 데몬 자동 시작 설정
sudo systemctl enable docker.service

# 개발 시 도커는 필요없지만 실환경과 비슷하게 하기 위해 설치
도커 개발용 설치
Windows  winget install --id Docker.DockerDesktop
macOs brew install --cask docker
ubuntu sudo apt update && sudo apt install -y docker.io docker-compose


# 아키텍처 구분

src/app.js

Express 서버 설정, 미들웨어 등록, 라우트 연결, Socket.IO 초기화

src/config/

db.js: Sequelize(MySQL) 연결

redis.js: ioredis(레디스) 연결

src/controllers/

HTTP 요청 수신 → 서비스 호출 → 응답 반환

src/middlewares/

요청 유효성 검사, 인증·인가, 에러 처리, 속도 제한

src/model/

Sequelize 모델 정의 (테이블 스키마)

src/routes/

URI별 엔드포인트 정의 → 컨트롤러 연결

src/services/

비즈니스 로직, DB 조회·수정, 캐시 조회·갱신

src/sockets/

socket.io 이벤트 리스너 및 브로드캐스트 로직

src/utils/

공통 유틸 함수 (검증, 로깅 등)








